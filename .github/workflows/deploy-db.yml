# .github/workflows/deploy-db.yml
# ---------------------------------------------------------------------------
# Deploy MySQL schemas to the managed DigitalOcean cluster.
# • Installs a fresh MySQL CLI on the runner
# • Uses system CA bundle for SSL verification
# ---------------------------------------------------------------------------

name: Deploy MySQL Schemas

on:
  push:
    branches: [ "main" ]
    paths:
      - "db/**"

jobs:
  deploy-db:
    runs-on: ubuntu-latest

    env:
      # secrets
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.TF_VAR_do_token }}
      # fixed cluster ID – keep in sync with Terraform
      DO_DB_CLUSTER:      7ca7a1f8-2971-4f9b-a54e-9d6e16d162bc

    steps:
    # ─────────────────── 1 — Check out repo ────────────────────────────────
    - uses: actions/checkout@v4

    # ─────────────────── 2 — Ensure MySQL client is present ───────────────
    - name: Install MySQL client
      run: |
        sudo apt-get update -y
        sudo DEBIAN_FRONTEND=noninteractive \
             apt-get install -y mysql-client-core-8.0

    # ─────────────────── 3 — Install & auth doctl ─────────────────────────
    - name: Install & authenticate doctl
      run: |
        set -e
        ver=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
               | grep '"tag_name"' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${ver}/doctl-${ver}-linux-amd64.tar.gz" \
          | tar -xz
        sudo mv doctl /usr/local/bin
        doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # ─────────────────── 4 — Fetch temporary DB credentials ───────────────
    - id: conn
      name: Get connection string
      run: |
        set -e
        uri=$(doctl databases connection $DO_DB_CLUSTER --format URI --no-header)
        host=$(echo "$uri" | sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\1|')
        port=$(echo "$uri" | sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\2|')
        user=$(echo "$uri" | sed -E 's|mysql://([^:]+):[^@]+@.*|\1|')
        pass=$(echo "$uri" | sed -E 's|mysql://[^:]+:([^@]+)@.*|\1|')
        echo "host=$host" >> $GITHUB_OUTPUT
        echo "port=$port" >> $GITHUB_OUTPUT
        echo "user=$user" >> $GITHUB_OUTPUT
        echo "::add-mask::$pass"
        echo "pass=$pass" >> $GITHUB_OUTPUT

    # ─────────────────── 5 — Ensure databases exist ───────────────────────
    - name: Create databases if missing
      run: |
        mysql --ssl-mode=REQUIRED --ssl-ca=/etc/ssl/certs/ca-certificates.crt \
              -h${{ steps.conn.outputs.host }} -P${{ steps.conn.outputs.port }} \
              -u${{ steps.conn.outputs.user }} -p${{ steps.conn.outputs.pass }} \
          -e "CREATE DATABASE IF NOT EXISTS Axialy_UI
                     CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
              CREATE DATABASE IF NOT EXISTS Axialy_Admin
                     CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

    # ─────────────────── 6 — Apply schemas ────────────────────────────────
    - name: Apply Axialy_UI schema
      run: |
        mysql --ssl-mode=REQUIRED --ssl-ca=/etc/ssl/certs/ca-certificates.crt \
              -h${{ steps.conn.outputs.host }} -P${{ steps.conn.outputs.port }} \
              -u${{ steps.conn.outputs.user }} -p${{ steps.conn.outputs.pass }} \
              Axialy_UI < db/axialy_ui.sql

    - name: Apply Axialy_Admin schema
      run: |
        mysql --ssl-mode=REQUIRED --ssl-ca=/etc/ssl/certs/ca-certificates.crt \
              -h${{ steps.conn.outputs.host }} -P${{ steps.conn.outputs.port }} \
              -u${{ steps.conn.outputs.user }} -p${{ steps.conn.outputs.pass }} \
              Axialy_Admin < db/axialy_admin.sql
