# Provisions (or updates) ONLY the infrastructure needed for the
# Axialy Admin product:
#   • 1× DigitalOcean MySQL cluster  (Axialy_Admin + Axialy_UI)
#   • 1× Droplet  admin.axialy.ai
#
# Fully hands-off: just push to `main` and the workflow handles
# everything, whether the resources already exist or not.

name: Provision Admin Infra

on:
  push:
    branches: [ "main" ]
    paths:
      - "infra/**"
      - "axialy-admin-product/**"

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      # DO credentials & TF variables come straight from repo secrets
      DIGITALOCEAN_TOKEN:     ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:        ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_fingerprint: ${{ secrets.SSH_FINGERPRINT }}

    steps:
    # ──────────────────────────────────────────────────────────────
    # 1 ▸ Checkout code
    # ──────────────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ──────────────────────────────────────────────────────────────
    # 2 ▸ Install doctl  (used by import_existing.sh)
    # ──────────────────────────────────────────────────────────────
    - name: Install doctl
      run: |
        set -e
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
               | grep '"tag_name"' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz" \
          | tar -xz
        sudo mv doctl /usr/local/bin
        doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # ──────────────────────────────────────────────────────────────
    # 3 ▸ Install Terraform CLI
    # ──────────────────────────────────────────────────────────────
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2

    # ──────────────────────────────────────────────────────────────
    # 4 ▸ Fresh working dir  (wipe any stale state)
    # ──────────────────────────────────────────────────────────────
    - name: Prepare Terraform working directory
      working-directory: infra
      run: |
        rm -f terraform.tfstate*
        rm -f .terraform.lock.hcl
        rm -rf .terraform

    # ──────────────────────────────────────────────────────────────
    # 5 ▸ **Initialise provider BEFORE imports**  ← this is the fix
    # ──────────────────────────────────────────────────────────────
    - name: Terraform init (download provider for import)
      working-directory: infra
      run: terraform init -backend=false -input=false

    # ──────────────────────────────────────────────────────────────
    # 6 ▸ Import any pre-existing resources (idempotent)
    # ──────────────────────────────────────────────────────────────
    - name: Import existing resources
      working-directory: infra
      run: bash import_existing.sh

    # ──────────────────────────────────────────────────────────────
    # 7 ▸ Normal init / plan / apply
    # ──────────────────────────────────────────────────────────────
    - name: Terraform init
      working-directory: infra
      run: terraform init -input=false

    - name: Terraform plan
      working-directory: infra
      run: terraform plan -input=false

    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      working-directory: infra
      run: terraform apply -auto-approve -input=false
