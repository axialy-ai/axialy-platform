# =======================================================================
#  Axialy ‚ñ∏ Admin  ‚Äì production deploy (self-provisioning DB cluster)
# =======================================================================

name: deploy
on: [push]

jobs:
  deploy:
    name: Build & deploy to prod droplet
    runs-on: ubuntu-24.04

    # -------------------------------------------------------------------
    #  Secrets that already exist in your repo
    # -------------------------------------------------------------------
    env:
      DIGITALOCEAN_TOKEN:      ${{ secrets.DIGITALOCEAN_TOKEN }}
      DROPLET_SSH_KEY:         ${{ secrets.DROPLET_SSH_KEY }}
      DROPLET_SSH_PASSPHRASE:  ${{ secrets.DROPLET_SSH_PASSPHRASE }}
      DROPLET_IP:              ${{ secrets.DROPLET_IP }}

      # internal constants
      CLUSTER_NAME:  axialy-db-cluster
      REGION:        nyc3              # change if you want another region
      DB_SIZE:       db-s-1vcpu-1gb    # cheapest; tweak as needed
      ENGINE_VER:    8                 # MySQL 8
      DOCTL_VERSION: v1.108.0

    steps:

    # ------------------------------------------------------------------
    - name: üöö  Checkout
      uses: actions/checkout@v4

    # ------------------------------------------------------------------
    - name: üõ†  Install doctl ${{ env.DOCTL_VERSION }}
      shell: bash
      run: |
        set -euo pipefail
        curl -sSfL \
          "https://github.com/digitalocean/doctl/releases/download/${DOCTL_VERSION}/doctl-${DOCTL_VERSION#v}-linux-amd64.tar.gz" \
          | tar -xz doctl
        sudo mv doctl /usr/local/bin
        doctl version
        doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # ------------------------------------------------------------------
    - name: üóÑÔ∏è  Ensure managed-DB cluster exists
      id: db
      shell: bash
      run: |
        set -euo pipefail

        echo "+ Looking for existing cluster ‚Äú$CLUSTER_NAME‚Äù‚Ä¶"
        CLUSTER_ID=$(doctl databases list --format ID,Name --no-header \
                      | awk -v n="$CLUSTER_NAME" '$2==n{print $1;exit}')

        if [[ -z "$CLUSTER_ID" ]]; then
          echo "+ Not found ‚Äì creating now"
          # create returns JSON; extract the ID with jq
          CLUSTER_ID=$(doctl databases create "$CLUSTER_NAME" \
                         --engine mysql          \
                         --num-nodes 1           \
                         --size "$DB_SIZE"       \
                         --region "$REGION"      \
                         --version "$ENGINE_VER" \
                         --format ID             \
                         --no-header)
          echo "+ Cluster ID: $CLUSTER_ID"

          echo "+ Waiting until status == online (can be 2-4 min)‚Ä¶"
          until [[ "$(doctl databases get "$CLUSTER_ID" --format Status --no-header)" == "online" ]]; do
            sleep 10
          done
        else
          echo "+ Found: $CLUSTER_ID"
        fi

        # ----------------------------------------------------------------
        echo "+ Pulling connection string"
        URI=$(doctl databases connection "$CLUSTER_ID" --format URI --no-header)

        host=$(sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\1|' <<<"$URI")
        port=$(sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\2|' <<<"$URI")
        user=$(sed -E 's|mysql://([^:]+):[^@]+@.*|\1|'                <<<"$URI")
        pass=$(sed -E 's|mysql://[^:]+:([^@]+)@.*|\1|'                <<<"$URI")

        echo "::add-mask::$pass"
        {
          echo "DB_HOST=$host"
          echo "DB_PORT=$port"
          echo "DB_USER=$user"
          echo "DB_PASS=$pass"
        } >> "$GITHUB_ENV"

    # ------------------------------------------------------------------
    - name: üì¶  Make release tarball
      run: |
        set -euo pipefail
        tar --exclude=.git --exclude='.github' -czf site.tar.gz .

    # ------------------------------------------------------------------
    - name: üöö  Copy code to droplet
      uses: appleboy/scp-action@v0.1.5
      with:
        host:       ${{ env.DROPLET_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:     site.tar.gz
        target:     /tmp/

    # ------------------------------------------------------------------
    - name: üöÄ  Activate new release
      uses: appleboy/ssh-action@v0.1.6
      with:
        host:       ${{ env.DROPLET_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        script: |
          set -euo pipefail
          echo "+ Unpacking site"
          rm -rf /var/www/html.bak || true
          [[ -d /var/www/html ]] && mv /var/www/html /var/www/html.bak
          mkdir -p /var/www/html
          tar -xzf /tmp/site.tar.gz -C /var/www/html
          chown -R www-data:www-data /var/www/html
          rm /tmp/site.tar.gz
          echo "+ Reloading PHP & Nginx"
          (systemctl reload php8.3-fpm || systemctl reload php8.2-fpm || true)
          systemctl reload nginx
          echo "+ Done.  \o/"

# =======================================================================
