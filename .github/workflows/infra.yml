# GitHub Action – keeps DigitalOcean & NameSilo in sync on every push to main
name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
      NAMESILO_API_KEY:   ${{ secrets.NAMESILO_API_KEY }}
      NAMESILO_DOMAIN:    axialy.ai
      DROPLET_SSH_KEY:    ${{ secrets.DROPLET_SSH_KEY }}   # private key for SCP

    steps:
    # ── 1) Checkout code ─────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── 2) Detect whether the marketing site changed ────────────────
    - id: filter
      uses: dorny/paths-filter@v3
      with:
        list-files: none
        initial-fetch-depth: 100
        filters: |
          marketing:
            - 'axialy-marketing-site/**'

    # ── 3) Install doctl & authenticate ─────────────────────────────
    - name: Install doctl
      run: |
        set -e
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest |
                grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz" |
          tar -xz
        sudo mv doctl /usr/local/bin

    - name: doctl auth
      run: doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # ── 4) Terraform CLI ────────────────────────────────────────────
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2

    - name: Terraform init
      run: terraform -chdir=infra init -upgrade

    # ── 5) Import existing DigitalOcean resources ───────────────────
    - name: Import existing resources
      run: |
        set -eo pipefail
        cd infra
        state_has () { [ -f terraform.tfstate ] && terraform state list | grep -q "^$1$"; }

        # Project
        PID=$(doctl projects list --format ID,Name --no-header | awk '$2=="Axialy"{print $1; exit}')
        [ -n "$PID" ] && ! state_has digitalocean_project.axialy && \
          terraform import digitalocean_project.axialy "$PID"

        # DB cluster + DBs
        CID=$(doctl databases list --format ID,Name --no-header | awk '$2=="axialy-db-cluster"{print $1; exit}')
        if [ -n "$CID" ]; then
          state_has digitalocean_database_cluster.mysql || \
            terraform import digitalocean_database_cluster.mysql "$CID"
          declare -A DBS=( ["ui"]="Axialy_UI" ["admin"]="Axialy_Admin" )
          for RES in "${!DBS[@]}"; do
            DB="${DBS[$RES]}"
            if doctl databases db list "$CID" --format Name --no-header | grep -qw "$DB" \
               && ! state_has "digitalocean_database_db.${RES}"
            then
              terraform import "digitalocean_database_db.${RES}" "${CID},${DB}"
            fi
          done
        fi

        # Droplets
        declare -A DROPS=(
          ["ui"]="ui.axialy.ai"
          ["api"]="api.axialy.ai"
          ["admin"]="admin.axialy.ai"
          ["root"]="axialy.ai"
        )
        for RES in "${!DROPS[@]}"; do
          NAME="${DROPS[$RES]}"
          DID=$(doctl compute droplet list --format ID,Name --no-header | awk -v n="$NAME" '$2==n{print $1; exit}')
          if [ -n "$DID" ] && ! state_has "digitalocean_droplet.${RES}"; then
            terraform import "digitalocean_droplet.${RES}" "$DID"
          fi
        done

    # ── 6) Plan & apply (main only) ─────────────────────────────────
    - name: Terraform plan
      run: terraform -chdir=infra plan -input=false

    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=infra apply -auto-approve -input=false

    # ── 7) Expose droplet IPs to later steps ────────────────────────
    - id: ips
      run: |
        IPS=$(terraform -chdir=infra output -json droplet_ips)
        echo "ROOT_IP=$(  echo "$IPS" | jq -r '.root')"  >> "$GITHUB_ENV"
        echo "UI_IP=$(    echo "$IPS" | jq -r '.ui')"    >> "$GITHUB_ENV"
        echo "API_IP=$(   echo "$IPS" | jq -r '.api')"   >> "$GITHUB_ENV"
        echo "ADMIN_IP=$( echo "$IPS" | jq -r '.admin')" >> "$GITHUB_ENV"

    # ── 8) Update NameSilo DNS records ──────────────────────────────
    - name: Update NameSilo DNS
      if: github.ref == 'refs/heads/main'
      env:
        DOMAIN: ${{ env.NAMESILO_DOMAIN }}
      run: |
        set -e
        KEY=$NAMESILO_API_KEY
        DOMAIN=$NAMESILO_DOMAIN

        upsert () {                       # $1 = rrhost, $2 = IP
          RRHOST="$1"; IP="$2"
          LIST=$(curl -s "https://www.namesilo.com/api/dnsListRecords?version=1&type=json&key=${KEY}&domain=${DOMAIN}")
          RRID=$(echo "$LIST" | jq -r ".namesilo.response.resource_record[] |
                   select(.type==\"A\" and ((.host==\"${DOMAIN}\" and \"${RRHOST}\"==\"\") or .host==\"${RRHOST}.${DOMAIN}\")) |
                   .record_id" | head -n 1)
          HOST_PARAM=$([ -z "$RRHOST" ] && echo "" || echo "rrhost=${RRHOST}&")
          if [ -n "$RRID" ]; then
            curl -s "https://www.namesilo.com/api/dnsUpdateRecord?version=1&type=json&key=${KEY}&domain=${DOMAIN}&rrid=${RRID}&${HOST_PARAM}rrvalue=${IP}&rrttl=3600" > /dev/null
          else
            curl -s "https://www.namesilo.com/api/dnsAddRecord?version=1&type=json&key=${KEY}&domain=${DOMAIN}&${HOST_PARAM}rrvalue=${IP}&rrtype=A&rrttl=3600" > /dev/null
          fi
        }

        upsert "admin" "$ADMIN_IP"
        upsert "ui"    "$UI_IP"
        upsert "api"   "$API_IP"
        upsert "www"   "$ROOT_IP"
        upsert ""      "$ROOT_IP"   # apex

    # ── 9) Deploy marketing site when it changed ────────────────────
    - name: Deploy axialy-marketing-site to root droplet
      if: steps.filter.outputs.marketing == 'true'
      uses: appleboy/scp-action@v0.1.5
      with:
        host:   ${{ env.ROOT_IP }}
        username: root
        key:     ${{ env.DROPLET_SSH_KEY }}
        source:  "axialy-marketing-site/*"
        target:  "/var/www/html/"          # adjust if your Nginx root differs
        strip_components: 1                # drop the leading folder
