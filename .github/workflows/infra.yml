# .github/workflows/infra.yml   ← REPLACE the whole file
name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
      NAMESILO_API_KEY:   ${{ secrets.NAMESILO_API_KEY }}
      NAMESILO_DOMAIN:    axialy.ai
      DROPLET_SSH_KEY:    ${{ secrets.DROPLET_SSH_KEY }}

    steps:
    # 1) Checkout repo
    - uses: actions/checkout@v4

    # 2) Remove any stale local artefacts (state / lock / plugin cache)
    - name: Remove stale Terraform artefacts
      run: |
        rm -f infra/terraform.tfstate*
        rm -f infra/.terraform.lock.hcl
        rm -rf infra/.terraform

    # 3) Detect marketing-site changes
    - id: filter
      uses: dorny/paths-filter@v3
      with:
        list-files: none
        initial-fetch-depth: 100
        filters: |
          marketing:
            - 'axialy-marketing-site/**'

    # 4) Install doctl & authenticate
    - name: Install doctl
      run: |
        set -e
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
               | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz" \
          | tar -xz
        sudo mv doctl /usr/local/bin

    - name: doctl auth
      run: doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # 5) Terraform CLI
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2

    - name: Terraform init
      run: terraform -chdir=infra init -upgrade

    # 6) Import any existing DigitalOcean resources into state
    - name: Import existing resources
      run: bash infra/import_existing.sh

    # 7) Purge DNS A-records **only** for droplets that are currently missing
    - name: Purge stale NameSilo A-records (for soon-to-be-created droplets)
      env:
        NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
        NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
      run: bash infra/purge_namesilo_missing.sh

    # 8) Plan & apply
    - name: Terraform plan
      run: terraform -chdir=infra plan -input=false

    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=infra apply -auto-approve -input=false

    # 9) Expose droplet IPs for later steps
    - id: ips
      run: |
        IPS=$(terraform -chdir=infra output -json droplet_ips)
        echo "ROOT_IP=$(  echo "$IPS" | jq -r '.root')"  >> "$GITHUB_ENV"
        echo "UI_IP=$(    echo "$IPS" | jq -r '.ui')"    >> "$GITHUB_ENV"
        echo "API_IP=$(   echo "$IPS" | jq -r '.api')"   >> "$GITHUB_ENV"
        echo "ADMIN_IP=$( echo "$IPS" | jq -r '.admin')" >> "$GITHUB_ENV"

    # 10) Update NameSilo DNS – now add the single, correct A-record per host
    - name: Update NameSilo DNS
      if: github.ref == 'refs/heads/main'
      env:
        NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
        NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
      run: bash infra/update_namesilo.sh

    # 11) Deploy marketing site when it changed
    - name: Deploy axialy-marketing-site to root droplet
      if: steps.filter.outputs.marketing == 'true'
      uses: appleboy/scp-action@v0.1.5
      with:
        host:   ${{ env.ROOT_IP }}
        username: root
        key:     ${{ env.DROPLET_SSH_KEY }}
        source:  "axialy-marketing-site/*"
        target:  "/var/www/html/"
        strip_components: 1
