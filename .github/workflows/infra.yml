name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      # DigitalOcean – one secret drives everything
      DIGITALOCEAN_TOKEN:        ${{ secrets.TF_VAR_DO_TOKEN }}
      TF_VAR_do_token:           ${{ secrets.TF_VAR_DO_TOKEN }}
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_VAR_DO_TOKEN }}

      # NameSilo
      NAMESILO_API_KEY:          ${{ secrets.NAMESILO_API_KEY }}
      NAMESILO_DOMAIN:           axialy.ai

      # SSH
      DROPLET_SSH_KEY:           ${{ secrets.DROPLET_SSH_KEY }}
      DROPLET_SSH_PASSPHRASE:    ${{ secrets.DROPLET_SSH_PASSPHRASE }}
      TF_VAR_ssh_fingerprint:    ${{ secrets.SSH_FINGERPRINT }}

    steps:
    # 1 – checkout
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2 – clean stale TF artefacts (cancelled jobs etc.)
    - name: Remove stale Terraform artefacts
      run: |
        rm -f infra/terraform.tfstate*
        rm -f infra/.terraform.lock.hcl
        rm -rf infra/.terraform

    # 3 – optional: detect changed product folders (speeds up later)
    - id: filter
      name: Detect content changes
      uses: dorny/paths-filter@v3
      with:
        list-files: none
        initial-fetch-depth: 100
        filters: |
          marketing: [ 'axialy-marketing-site/**' ]
          ui:        [ 'axialy-ui-product/**'     ]
          admin:     [ 'axialy-admin-product/**'  ]
          api:       [ 'axialy-api-product/**'    ]

    # 4 – install latest doctl (token already in env)
    - name: Install doctl
      shell: bash
      run: |
        set -euo pipefail
        command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }
        VER=$(curl -sSf https://api.github.com/repos/digitalocean/doctl/releases/latest | jq -r '.tag_name' | sed 's/^v//')
        curl -sSLf -o /tmp/doctl.tgz "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz"
        tar -xzf /tmp/doctl.tgz -C /tmp
        sudo install -m 755 /tmp/doctl /usr/local/bin
        echo "Installed $(doctl version)"

    # 5 – Terraform CLI (**patched 1.8.x**, fixes the schema bug)
    - name: Set up Terraform CLI
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~> 1.8"

    # 6 – init / import / plan / apply
    - name: Terraform init
      run: terraform -chdir=infra init

    - name: Import existing resources
      run: bash infra/import_existing.sh

    - name: Purge stale NameSilo A records
      env:
        NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
        NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
      run: bash infra/purge_namesilo_missing.sh

    - name: Terraform plan
      run: terraform -chdir=infra plan -input=false

    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=infra apply -auto-approve -input=false

    # 7 – capture droplet IPs
    - id: ips
      name: Capture droplet IPs
      run: |
        IPS=$(terraform -chdir=infra output -json droplet_ips)
        echo "ROOT_IP=$(  echo "$IPS" | jq -r '.root')"  >> "$GITHUB_ENV"
        echo "UI_IP=$(    echo "$IPS" | jq -r '.ui')"    >> "$GITHUB_ENV"
        echo "API_IP=$(   echo "$IPS" | jq -r '.api')"   >> "$GITHUB_ENV"
        echo "ADMIN_IP=$( echo "$IPS" | jq -r '.admin')" >> "$GITHUB_ENV"

    # 8 – wait until SSH answers
    - name: Wait for SSH on droplets
      shell: bash
      run: |
        wait_ssh () {
          local h=$1; echo "Waiting for SSH on $h …"
          for i in {1..30}; do nc -z -w3 "$h" 22 && { echo "$h ready"; return; }; sleep 5; done
          echo "::error::SSH never became ready on $h"; exit 1
        }
        wait_ssh "$ROOT_IP"; wait_ssh "$UI_IP"; wait_ssh "$ADMIN_IP"; wait_ssh "$API_IP"

    # 9 – update NameSilo DNS
    - name: Update NameSilo DNS
      if: github.ref == 'refs/heads/main'
      env:
        NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
        NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
      run: bash infra/update_namesilo.sh

    # 10 – deploy artefacts to droplets (scp)
    - name: Deploy marketing site
      uses: appleboy/scp-action@v0.1.5
      with:
        host:       ${{ env.ROOT_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:     axialy-marketing-site/*
        target:     /var/www/html/
        strip_components: 1
        timeout:    120s

    - name: Deploy UI product
      uses: appleboy/scp-action@v0.1.5
      with:
        host:       ${{ env.UI_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:     axialy-ui-product/*
        target:     /var/www/html/
        strip_components: 1
        timeout:    120s

    - name: Deploy Admin product
      uses: appleboy/scp-action@v0.1.5
      with:
        host:       ${{ env.ADMIN_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:     axialy-admin-product/*
        target:     /var/www/html/
        strip_components: 1
        timeout:    120s

    - name: Deploy API product
      uses: appleboy/scp-action@v0.1.5
      with:
        host:       ${{ env.API_IP }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:     axialy-api-product/*
        target:     /var/www/html/
        strip_components: 1
        timeout:    120s
