name: Terraform DigitalOcean & Marketing-Site Deploy

on:
  push:
    branches: [ "main" ]

jobs:
# ──────────────────────────────────────────────────────────
# 1) Build / maintain infrastructure & DNS (unchanged)
# ──────────────────────────────────────────────────────────
  terraform:
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
      NAMESILO_API_KEY:   ${{ secrets.NAMESILO_API_KEY }}
      NAMESILO_DOMAIN:    axialy.ai

    outputs:
      root_ip:      ${{ steps.get_ips.outputs.root_ip }}
      site_changed: ${{ steps.filter.outputs.marketing == 'true' }}

    steps:
    # Was the marketing site touched?
    - id: filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          marketing:
            - 'axialy-marketing-site/**'

    - uses: actions/checkout@v4

    # doctl
    - name: Install doctl
      run: |
        set -e
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
                | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz" \
          | tar -xz
        sudo mv doctl /usr/local/bin
    - name: doctl auth
      run: doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # Terraform
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2
    - name: Terraform init
      run: terraform -chdir=infra init -upgrade
    - name: Import existing resources   # …unchanged import logic…
      run: bash infra/import_existing.sh    # (<── the same shell block you already use)
    - name: Terraform plan
      run: terraform -chdir=infra plan -input=false
    - name: Terraform apply
      run: terraform -chdir=infra apply -auto-approve -input=false

    # Grab the root-site IP for the deploy job
    - id: get_ips
      run: echo "root_ip=$(terraform -chdir=infra output -raw droplet_ips.root)" >> "$GITHUB_OUTPUT"

    # Update NameSilo DNS  (unchanged, still writes blank host for apex)
    - name: Update NameSilo DNS
      run: bash infra/update_namesilo.sh

# ──────────────────────────────────────────────────────────
# 2) Re-deploy axialy-marketing-site/  (runs only if changed)
# ──────────────────────────────────────────────────────────
  deploy_marketing_site:
    needs: terraform
    if: needs.terraform.outputs.site_changed == 'true'
    runs-on: ubuntu-latest
    env:
      DROPLET_IP:      ${{ needs.terraform.outputs.root_ip }}
      SSH_PRIVATE_KEY: ${{ secrets.DROPLET_SSH_KEY }}   # one-time secret, see below
      SSH_USER:        root                              # or “ubuntu”

    steps:
    - uses: actions/checkout@v4

    - name: Install rsync & ssh client
      run: sudo apt-get update -y && sudo apt-get install -y rsync openssh-client

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "$DROPLET_IP" >> ~/.ssh/known_hosts

    # 1. Ensure Nginx is present & running (idempotent)
    - name: Install / start Nginx on droplet
      run: |
        ssh -o StrictHostKeyChecking=no "$SSH_USER@$DROPLET_IP" \
          'sudo apt-get update -y && sudo apt-get install -y nginx && sudo systemctl enable --now nginx'

    # 2. Sync site files
    - name: Upload marketing site
      run: |
        rsync -avz --delete axialy-marketing-site/ "$SSH_USER@$DROPLET_IP:/var/www/html/"

    # 3. Reload Nginx to pick up new files
    - name: Reload Nginx
      run: ssh "$SSH_USER@$DROPLET_IP" 'sudo systemctl reload nginx'
