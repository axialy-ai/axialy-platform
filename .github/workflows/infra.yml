name: Axialy Infra (DO + NameSilo)

on:
  push:
    branches: [ "main" ]

env:                                  # available to every step
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
  TF_VAR_ns_key:      ${{ secrets.NAMESILO_API_KEY }}
  TF_VAR_ns_domain:   axialy.ai
  DROPLET_SSH_KEY:    ${{ secrets.DROPLET_SSH_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    # ── 1  Checkout ────────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── 2  Install jq & doctl (once) ──────────────────────────────────────
    - name: Install jq + doctl
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install -y jq
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
              | jq -r .tag_name | sed 's/^v//')
        curl -sL https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz \
          | tar -xz
        sudo mv doctl /usr/local/bin

    - name: doctl auth
      run: doctl auth init -t "$DIGITALOCEAN_TOKEN"

    # ── 3  Terraform CLI ──────────────────────────────────────────────────
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2

    - name: terraform init
      run: terraform -chdir=infra init -upgrade -input=false

    # ── 4  Import existing DO stuff (unchanged logic, just in its own file)
    - name: Import existing DO resources
      run: infra/import_existing.sh

    # ── 5  CLEAN-UP: kill dupe A-records for the 5 hosts we manage ───────
    - name: Prune duplicate NameSilo A-records (once, pre-apply)
      shell: bash
      run: |
        set -euo pipefail
        hosts=( "@" "www" "admin" "ui" "api" )
        echo "Pruning duplicates for: ${hosts[*]}"

        all=$(curl -s "https://www.namesilo.com/api/dnsListRecords?version=1&type=json&key=${TF_VAR_ns_key}&domain=${TF_VAR_ns_domain}")

        for h in "${hosts[@]}"; do
          ids=($(echo "$all" \
            | jq -r --arg H "$h" --arg D "$TF_VAR_ns_domain" '
                 .reply.resource_record[]
                 | select(.type=="A" and
                         (if $H=="@" then .host==$D or .host=="@"
                          else .host==$H+"."+$D end))
                 | .record_id'))
          (( ${#ids[@]} < 2 )) && continue       # 0 or 1 – nothing to prune

          # Keep the first, delete the rest
          printf "• %s → pruning %d duplicate(s)\n" "$h" "$(( ${#ids[@]} - 1 ))"
          for rid in "${ids[@]:1}"; do
            curl -s "https://www.namesilo.com/api/dnsDeleteRecord?version=1&type=json&key=${TF_VAR_ns_key}&domain=${TF_VAR_ns_domain}&rrid=${rid}" \
              | jq -e '.reply.code=="300"' >/dev/null
          done
        done
        echo "✓  duplicates gone"

    # ── 6  PLAN + APPLY (single apply; DNS is part of the plan!) ──────────
    - name: terraform plan
      run: terraform -chdir=infra plan -input=false

    - name: terraform apply
      run: terraform -chdir=infra apply -auto-approve -input=false

    # ── 7  Marketing site deploy (trigger only if that folder changed) ────
    - id: changed
      uses: dorny/paths-filter@v3
      with:
        list-files: none
        initial-fetch-depth: 100
        filters: |
          marketing:
            - 'axialy-marketing-site/**'

    - name: Deploy marketing site to root droplet
      if: steps.changed.outputs.marketing == 'true'
      uses: appleboy/scp-action@v0.1.5
      with:
        host:   ${{ steps.apply.outputs.digitalocean_droplet_root_ipv4_address }}
        username: root
        key:     ${{ env.DROPLET_SSH_KEY }}
        source:  "axialy-marketing-site/*"
        target:  "/var/www/html/"
        strip_components: 1
