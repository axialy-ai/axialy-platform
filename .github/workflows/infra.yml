# GitHub Action â€“ keeps DigitalOcean in sync on every push to main
name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}

    steps:
    - uses: actions/checkout@v4

    - name: Install doctl
      run: |
        set -e
        VER=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest \
                | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        curl -sL "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz" \
          | tar -xz
        sudo mv doctl /usr/local/bin

    - name: doctl auth
      run: doctl auth init -t "$DIGITALOCEAN_TOKEN"

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.2

    - name: Terraform init
      run: terraform -chdir=infra init -upgrade

    - name: Import existing resources
      run: |
        set -eo pipefail
        cd infra
        state_has () { [ -f terraform.tfstate ] && terraform state list | grep -q "^$1$"; }

        PID=$(doctl projects list --format ID,Name --no-header | awk '$2=="Axialy"{print $1; exit}')
        if [ -n "$PID" ] && ! state_has digitalocean_project.axialy; then
          terraform import digitalocean_project.axialy "$PID"
        fi

        CID=$(doctl databases list --format ID,Name --no-header | awk '$2=="axialy-db-cluster"{print $1; exit}')
        if [ -n "$CID" ]; then
          state_has digitalocean_database_cluster.mysql || terraform import digitalocean_database_cluster.mysql "$CID"
          declare -A DBS=( ["ui"]="Axialy_UI" ["admin"]="Axialy_Admin" )
          for RES in "${!DBS[@]}"; do
            DB="${DBS[$RES]}"
            if doctl databases db list "$CID" --format Name --no-header | grep -qw "$DB" \
              && ! state_has "digitalocean_database_db.${RES}"
            then
              terraform import "digitalocean_database_db.${RES}" "${CID},${DB}"
            fi
          done
        fi

        # ðŸ‘‰ Updated map includes the new WWW droplet
        declare -A DROPS=( ["ui"]="ui.axialy.ai" ["api"]="api.axialy.ai" ["admin"]="admin.axialy.ai" ["www"]="www.axialy.ai" )
        for RES in "${!DROPS[@]}"; do
          NAME="${DROPS[$RES]}"
          DID=$(doctl compute droplet list --format ID,Name --no-header | awk -v n="$NAME" '$2==n{print $1; exit}')
          if [ -n "$DID" ] && ! state_has "digitalocean_droplet.${RES}"; then
            terraform import "digitalocean_droplet.${RES}" "$DID"
          fi
        done

    - name: Terraform plan
      run: terraform -chdir=infra plan -input=false

    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=infra apply -auto-approve -input=false
