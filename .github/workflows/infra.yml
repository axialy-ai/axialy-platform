# GitHub Action: checks and (only if needed) fixes your DigitalOcean cloud
name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      # Your secret lives in Settings ▸ Secrets ▸ Actions
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}

    steps:
      # 1️⃣  Grab the repo code
      - name: Check out code
        uses: actions/checkout@v4

      # 2️⃣  Install the DigitalOcean CLI (“doctl”) and log in
      - name: Install doctl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y doctl
          doctl auth init -t "$DIGITALOCEAN_TOKEN"

      # 3️⃣  Install Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      # 4️⃣  Init (-upgrade = grab newest provider patch)
      - name: Terraform init
        run: terraform -chdir=infra init -upgrade

      # 5️⃣  Auto-import any items that already exist
      - name: Import existing DigitalOcean resources (safe to run every time)
        run: |
          set -eo pipefail
          cd infra

          # --- Project ---
          PID=$(doctl projects list --format ID,Name --no-header | awk '$2=="Axialy"{print $1}')
          if [ -n "$PID" ]; then
            terraform state list | grep -q '^digitalocean_project.axialy$' || \
              terraform import digitalocean_project.axialy "$PID"
          fi

          # --- Database cluster ---
          CID=$(doctl databases list --format ID,Name --no-header | awk '$2=="axialy-db-cluster"{print $1}')
          if [ -n "$CID" ]; then
            terraform state list | grep -q '^digitalocean_database_cluster.mysql$' || \
              terraform import digitalocean_database_cluster.mysql "$CID"

            # Inside that cluster, import UI & Admin DBs if they already exist
            for DB in Axialy_UI Axialy_Admin; do
              EXISTS=$(doctl databases db list "$CID" --format Name --no-header | grep -w "$DB" || true)
              if [ -n "$EXISTS" ]; then
                RESOURCE=$(echo "$DB" | tr '[:upper:]' '[:lower:]' | tr - _)
                terraform state list | grep -q "^digitalocean_database_db.${RESOURCE}$" || \
                  terraform import "digitalocean_database_db.${RESOURCE}" "${CID}:${DB}"
              fi
            done
          fi

          # --- Droplets ---
          declare -A DROPS=(["ui"]="ui.axialy.ai" ["api"]="api.axialy.ai" ["admin"]="admin.axialy.ai")
          for RES in "${!DROPS[@]}"; do
            NAME="${DROPS[$RES]}"
            DID=$(doctl compute droplet list --format ID,Name --no-header | awk -v n="$NAME" '$2==n{print $1}')
            if [ -n "$DID" ]; then
              terraform state list | grep -q "^digitalocean_droplet.${RES}$" || \
                terraform import "digitalocean_droplet.${RES}" "$DID"
            fi
          done

      # 6️⃣  Plan & apply
      - name: Terraform plan
        run: terraform -chdir=infra plan -input=false

      - name: Terraform apply (auto)
        if: github.ref == 'refs/heads/main'
        run: terraform -chdir=infra apply -auto-approve -input=false
