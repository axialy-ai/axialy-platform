# .github/workflows/infra.yml
name: Terraform DigitalOcean

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    runs-on: ubuntu-latest

    # -----------------------------------------------------------------------
    # Job-wide environment – ALL secrets UPPER-CASE
    # -----------------------------------------------------------------------
    env:
      # DigitalOcean
      DIGITALOCEAN_TOKEN:      ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:         ${{ secrets.TF_VAR_DO_TOKEN }}

      # NameSilo
      NAMESILO_API_KEY:        ${{ secrets.NAMESILO_API_KEY }}
      NAMESILO_DOMAIN:         axialy.ai      # literal

      # SSH key material
      DROPLET_SSH_KEY:         ${{ secrets.DROPLET_SSH_KEY }}
      DROPLET_SSH_PASSPHRASE:  ${{ secrets.DROPLET_SSH_PASSPHRASE }}

      # fingerprint injected into every droplet via TF
      TF_VAR_ssh_fingerprint:  ${{ secrets.SSH_FINGERPRINT }}

    steps:
      # 1 — checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2 — clean any local TF artefacts left by cancelled runs
      - name: Remove stale Terraform artefacts
        run: |
          rm -f infra/terraform.tfstate*
          rm -f infra/.terraform.lock.hcl
          rm -rf infra/.terraform

      # 3 — detect which *product* folders changed (still useful for speed)
      - id: filter
        name: Detect content changes
        uses: dorny/paths-filter@v3
        with:
          list-files: none
          initial-fetch-depth: 100
          filters: |
            marketing: [ 'axialy-marketing-site/**' ]
            ui:        [ 'axialy-ui-product/**'     ]
            admin:     [ 'axialy-admin-product/**'  ]
            api:       [ 'axialy-api-product/**'    ]
    
    #4 ─────────────── Install latest doctl ───────────────
    - name: Install doctl
      run: |
        set -euo pipefail                     # fail on any error (incl. pipes)
    
        # fetch latest tag (no trailing newline)
        VER=$(curl -sSf https://api.github.com/repos/digitalocean/doctl/releases/latest \
                | jq -r '.tag_name' | sed 's/^v//')
    
        # download the tarball (-f = fail if 4xx/5xx)
        curl -sSLf -o /tmp/doctl.tgz \
             "https://github.com/digitalocean/doctl/releases/download/v${VER}/doctl-${VER}-linux-amd64.tar.gz"
    
        # unpack and install
        tar -xzf /tmp/doctl.tgz -C /tmp
        sudo install -m 755 /tmp/doctl /usr/local/bin

      # 5 — install Terraform CLI
      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.2

      # 6 — init / import / plan / apply
      - name: Terraform init
        run: terraform -chdir=infra init

      - name: Import existing resources
        run: bash infra/import_existing.sh

      - name: Purge stale NameSilo A records
        env:
          NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
          NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
        run: bash infra/purge_namesilo_missing.sh

      - name: Terraform plan
        run: terraform -chdir=infra plan -input=false

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        run: terraform -chdir=infra apply -auto-approve -input=false

      # 7 — capture droplet IPs from TF outputs
      - id: ips
        name: Capture droplet IPs
        run: |
          IPS=$(terraform -chdir=infra output -json droplet_ips)
          echo "ROOT_IP=$(  echo "$IPS" | jq -r '.root')"  >> "$GITHUB_ENV"
          echo "UI_IP=$(    echo "$IPS" | jq -r '.ui')"    >> "$GITHUB_ENV"
          echo "API_IP=$(   echo "$IPS" | jq -r '.api')"   >> "$GITHUB_ENV"
          echo "ADMIN_IP=$( echo "$IPS" | jq -r '.admin')" >> "$GITHUB_ENV"

      # 8 — wait until SSH answers on every droplet
      - name: Wait for SSH on droplets
        shell: bash
        run: |
          wait_ssh () {
            local host=$1
            echo "Waiting for SSH on ${host} ..."
            for i in {1..30}; do
              nc -z -w3 "$host" 22 && { echo "${host} ready"; return; }
              sleep 5
            done
            echo "::error::SSH never became ready on ${host}"; exit 1
          }
          wait_ssh "$ROOT_IP"
          wait_ssh "$UI_IP"
          wait_ssh "$ADMIN_IP"
          wait_ssh "$API_IP"

      # 9 — update NameSilo DNS
      - name: Update NameSilo DNS
        if: github.ref == 'refs/heads/main'
        env:
          NAMESILO_API_KEY: ${{ env.NAMESILO_API_KEY }}
          NAMESILO_DOMAIN:  ${{ env.NAMESILO_DOMAIN }}
        run: bash infra/update_namesilo.sh

      # 10 — *always* copy the latest build artefacts to every droplet
      # -------------------------------------------------------------------
      - name: Deploy marketing site to root droplet
        uses: appleboy/scp-action@v0.1.5
        with:
          host:       ${{ env.ROOT_IP }}
          username:   root
          key:        ${{ env.DROPLET_SSH_KEY }}
          passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
          source:     axialy-marketing-site/*
          target:     /var/www/html/
          strip_components: 1
          timeout:    120s

      - name: Deploy UI product to ui droplet
        uses: appleboy/scp-action@v0.1.5
        with:
          host:       ${{ env.UI_IP }}
          username:   root
          key:        ${{ env.DROPLET_SSH_KEY }}
          passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
          source:     axialy-ui-product/*
          target:     /var/www/html/
          strip_components: 1
          timeout:    120s

      - name: Deploy Admin product to admin droplet
        uses: appleboy/scp-action@v0.1.5
        with:
          host:       ${{ env.ADMIN_IP }}
          username:   root
          key:        ${{ env.DROPLET_SSH_KEY }}
          passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
          source:     axialy-admin-product/*
          target:     /var/www/html/
          strip_components: 1
          timeout:    120s

      - name: Deploy API product to api droplet
        uses: appleboy/scp-action@v0.1.5
        with:
          host:       ${{ env.API_IP }}
          username:   root
          key:        ${{ env.DROPLET_SSH_KEY }}
          passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
          source:     axialy-api-product/*
          target:     /var/www/html/
          strip_components: 1
          timeout:    120s
