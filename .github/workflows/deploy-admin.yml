# .github/workflows/deploy-admin.yml
name: Deploy Admin

on:
  push:
    branches: [ "main" ]
    paths:
      - "axialy-admin-product/**"
      - ".github/workflows/deploy-admin.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_TOKEN:     ${{ secrets.DIGITALOCEAN_TOKEN }}
      DROPLET_SSH_KEY:        ${{ secrets.DROPLET_SSH_KEY }}
      DROPLET_SSH_PASSPHRASE: ${{ secrets.DROPLET_SSH_PASSPHRASE }}

    steps:
    # ───────────────────────────── 1 ─ Checkout ─────────────────────────────
    - uses: actions/checkout@v4

    # ───────────────────────────── 2 ─ doctl ────────────────────────────────
    - name: Install doctl
      env:
        # use the actions-supplied token so GitHub’s API never rate-limits us
        GH_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail

        # Query the latest tag (auth header avoids API limit; jq not needed)
        ver=$(curl -sSfL -H "Authorization: bearer $GH_TOKEN" \
                https://api.github.com/repos/digitalocean/doctl/releases/latest \
              | grep -oP '"tag_name"\s*:\s*"\Kv[0-9.]+')

        if [[ -z "$ver" ]]; then
          echo "::warning ::Could not detect latest doctl – using fallback v1.108.0"
          ver="v1.108.0"
        fi

        # Remove the leading “v” for the filename part
        file_ver=${ver#v}

        echo "Installing doctl $ver …"
        curl -sSfL \
          "https://github.com/digitalocean/doctl/releases/download/${ver}/doctl-${file_ver}-linux-amd64.tar.gz" \
          | tar -xz doctl

        sudo mv doctl /usr/local/bin
        doctl version
        doctl auth init -t "$DIGITALOCEAN_TOKEN"


    # ──────────────── 3 ─ Grab live DB credentials (cluster → URI) ──────────
    - id: db
      name: MySQL connection details
      run: |
        CID=$(doctl databases list --format ID,Name --no-header \
                | awk '$2=="axialy-db-cluster"{print $1; exit}')
        uri=$(doctl databases connection "$CID" --format URI --no-header)

        host=$(sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\1|' <<<"$uri")
        port=$(sed -E 's|mysql://[^:]+:[^@]+@([^:]+):([0-9]+)/.*|\2|' <<<"$uri")
        user=$(sed -E 's|mysql://([^:]+):[^@]+@.*|\1|'                <<<"$uri")
        pass=$(sed -E 's|mysql://[^:]+:([^@]+)@.*|\1|'                <<<"$uri")

        # mask the password **before** writing normal outputs
        echo "::add-mask::$pass"

        {
          echo "host=$host"
          echo "port=$port"
          echo "user=$user"
          echo "pass=$pass"
        } >>"$GITHUB_OUTPUT"

    # ─────────────── 4 ─ Find the admin droplet’s public IP ────────────────
    - id: ip
      name: Admin droplet IP
      run: |
        ip=$(doctl compute droplet list --format Name,PublicIPv4 --no-header \
               | awk '$1=="admin.axialy.ai"{print $2; exit}')
        echo "ip=$ip" >>"$GITHUB_OUTPUT"

    # ───────────────────────────── 5 ─ Wait for SSH ─────────────────────────
    - name: Wait for SSH
      run: |
        for i in {1..30}; do
          nc -z -w3 ${{ steps.ip.outputs.ip }} 22 && exit 0
          sleep 5
        done
        echo "::error::SSH never became ready"; exit 1

    # ───────────────────────────── 6 ─ Rsync code ───────────────────────────
    - name: Upload Admin source
      uses: appleboy/scp-action@v0.1.5
      with:
        host:             ${{ steps.ip.outputs.ip }}
        username:         root
        key:              ${{ env.DROPLET_SSH_KEY }}
        passphrase:       ${{ env.DROPLET_SSH_PASSPHRASE }}
        source:           axialy-admin-product/*
        target:           /var/www/html/
        strip_components: 1
        timeout:          120s

    # ──────────────────────── 7 ─ Write the .env file ───────────────────────
    - name: Drop runtime secrets
      uses: appleboy/ssh-action@v0.1.6
      with:
        host:       ${{ steps.ip.outputs.ip }}
        username:   root
        key:        ${{ env.DROPLET_SSH_KEY }}
        passphrase: ${{ env.DROPLET_SSH_PASSPHRASE }}
        script: |
          cat >/var/www/html/.env <<EOF
          DB_HOST=${{ steps.db.outputs.host }}
          DB_PORT=${{ steps.db.outputs.port }}
          DB_NAME=Axialy_Admin
          DB_USER=${{ steps.db.outputs.user }}
          DB_PASSWORD=${{ steps.db.outputs.pass }}
          ADMIN_DEFAULT_USER=${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_EMAIL=${{ secrets.ADMIN_DEFAULT_EMAIL }}
          ADMIN_DEFAULT_PASSWORD=${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          EOF
          chown www-data:www-data /var/www/html/.env
          chmod 640 /var/www/html/.env
          systemctl restart php8.1-fpm
          systemctl reload nginx
