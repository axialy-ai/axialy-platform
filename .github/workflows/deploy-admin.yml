# ─────────────────────────────────────────────────────────────────────────────
#  Axialy Admin – CI / CD
#  • manual trigger only (workflow_dispatch)
#  • builds the PHP-FPM image, provisions DigitalOcean infra with Terraform,
#    then configures the droplet with Ansible
# ─────────────────────────────────────────────────────────────────────────────
name: Deploy Axialy Admin

on:
  workflow_dispatch:        # ↩ manual “Run workflow” button

permissions:
  contents: read
  packages: write           # push to GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: axiamax/axialy-admin-php   # ghcr.io/axiamax/axialy-admin-php:latest

jobs:
###############################################################################
# ────────────────────────── Job 1 – Build & push image ──────────────────────
###############################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build & push PHP image
        run: |
          set -euo pipefail
          IMAGE="$REGISTRY/${{ env.IMAGE_NAME }}:latest"
          docker build -t "$IMAGE" -f docker/php/Dockerfile .
          docker push "$IMAGE"

###############################################################################
# ─────────────────── Job 2 – Terraform (droplet + DB) ───────────────────────
###############################################################################
  provision:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_pub_key: ${{ secrets.DROPLET_SSH_KEY }}
      TF_VAR_region:      "nyc3"

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Detect an existing DB cluster (optional) --------------------------
      - name: Detect existing DB cluster
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install doctl             # reliable on Ubuntu 24 runners
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq
          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"
          CID=$(doctl databases list --output json \
                | jq -r '.[] | select(.name=="axialy-cluster") | .id // empty')
          echo "cluster_id=$CID" >> "$GITHUB_OUTPUT"

      # 2️⃣ Terraform init / import / apply ----------------------------------
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -input=false

      - name: Import existing cluster (if found)
        if: steps.detect.outputs.cluster_id != ''
        run: |
          set -euo pipefail
          CID='${{ steps.detect.outputs.cluster_id }}'
          terraform import -input=false \
            'digitalocean_database_cluster.axialy' "$CID" || true
          terraform import -allow-missing-config -input=false \
            'digitalocean_database_db.ui'    "${CID}:Axialy_UI"    || true
          terraform import -allow-missing-config -input=false \
            'digitalocean_database_db.admin' "${CID}:Axialy_ADMIN" || true
          terraform import -allow-missing-config -input=false \
            'digitalocean_database_user.admin_user' "${CID}:axialy_admin_user" || true
          terraform import -allow-missing-config -input=false \
            'digitalocean_database_user.ui_user'    "${CID}:axialy_ui_user"    || true

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false

      # 3️⃣ Expose outputs to next job ---------------------------------------
      - name: Capture outputs
        id: tfout
        shell: bash
        run: |
          set -euo pipefail
          for var in droplet_ip db_host db_port db_username db_password ; do
            val=$(terraform output -raw "$var")
            echo "::add-mask::$val"
            echo "$var=$val" >> "$GITHUB_OUTPUT"
          done

    outputs:
      droplet_ip:  ${{ steps.tfout.outputs.droplet_ip }}
      db_host:     ${{ steps.tfout.outputs.db_host }}
      db_port:     ${{ steps.tfout.outputs.db_port }}
      db_username: ${{ steps.tfout.outputs.db_username }}
      db_password: ${{ steps.tfout.outputs.db_password }}

###############################################################################
# ───────────────── Job 3 – Configure droplet & deploy stack ─────────────────
###############################################################################
  configure:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: infra/ansible/playbook.yml
          inventory: |
            [all]
            ${{ needs.provision.outputs.droplet_ip }}
          options: |
            --private-key ${{ secrets.DROPLET_SSH_KEY }}
            --user root
        env:
          PHP_IMAGE:              ghcr.io/${{ env.IMAGE_NAME }}:latest
          ADMIN_DEFAULT_USER:     ${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_PASSWORD: ${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          ADMIN_DEFAULT_EMAIL:    ${{ secrets.ADMIN_DEFAULT_EMAIL }}
          DB_HOST:                ${{ needs.provision.outputs.db_host }}
          DB_PORT:                ${{ needs.provision.outputs.db_port }}
          DB_USERNAME:            ${{ needs.provision.outputs.db_username }}
          DB_PASSWORD:            ${{ needs.provision.outputs.db_password }}
