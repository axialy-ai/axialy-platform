name: Deploy Axialy Admin

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: axiamax/axialy-admin-php   # ghcr.io/axiamax/axialy-admin-php:latest

jobs:
###############################################################################
# ─────────────────────────── Job 1 – Build & Push ────────────────────────────
###############################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build & push PHP image
        run: |
          IMAGE="$REGISTRY/${{ env.IMAGE_NAME }}:latest"
          docker build -t "$IMAGE" -f docker/php/Dockerfile .
          docker push "$IMAGE"

###############################################################################
# ───────── Job 2 – Terraform (droplet + DB cluster) ──────────────────────────
###############################################################################
  provision:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_region:      "nyc3"

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ detect existing resources (cluster & SSH key) ---------------------
      - name: Detect existing DO resources
        id: detect
        shell: bash
        env:
          DO_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          set -euo pipefail
          echo "::group::Install doctl + jq"
          sudo snap install doctl
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq
          echo "::endgroup::"

          export DIGITALOCEAN_ACCESS_TOKEN="$DO_TOKEN"

          # quick PAT sanity-check – will exit non-zero if the token is wrong
          doctl account get >/dev/null

          # ── 1. database cluster ───────────────────────────────────────────
          CID=$(doctl databases list --output json \
                  | jq -r '.[] | select(.name=="axialy-cluster") | .id // empty')
          echo "cluster_id=$CID" >> "$GITHUB_OUTPUT"

          # ── 2. SSH key (must exist, we won’t attempt to create it here) ───
          KEY_ID=$(doctl ssh-key list --format ID,Name --no-header \
                      | awk '$2=="axialy-key"{print $1}')
          echo "ssh_key_id=$KEY_ID" >> "$GITHUB_OUTPUT"

          # fail fast if the account is on-hold (403 on create) OR
          # if the required SSH key is missing
          if [[ -z "$KEY_ID" ]]; then
            echo "::error::SSH key \"axialy-key\" not found in your DO account. \
Please create it once (or rename an existing key) and re-run the workflow."
            exit 1
          fi

          if [[ -z "$CID" ]]; then
            echo "::error::DigitalOcean reports your team is on HOLD – \
managed DB creation will fail. Resolve the billing/hold before deploying."
            exit 1
          fi

      # 2️⃣ Terraform ---------------------------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -input=false

      # import the pre-existing DB cluster & children
      - name: Import existing cluster (idempotent)
        run: |
          CID='${{ steps.detect.outputs.cluster_id }}'
          terraform import -input=false digitalocean_database_cluster.axialy "$CID" || true
          terraform import -allow-missing-config -input=false \
            digitalocean_database_db.ui "${CID}:Axialy_UI" || true
          terraform import -allow-missing-config -input=false \
            digitalocean_database_db.admin "${CID}:Axialy_ADMIN" || true
          terraform import -allow-missing-config -input=false \
            digitalocean_database_user.admin_user "${CID}:axialy_admin_user" || true
          terraform import -allow-missing-config -input=false \
            digitalocean_database_user.ui_user "${CID}:axialy_ui_user" || true

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false \
            -var="ssh_key_id=${{ steps.detect.outputs.ssh_key_id }}"

      # 3️⃣ expose outputs to next job ----------------------------------------
      - name: Capture outputs
        id: tfout
        shell: bash
        run: |
          for var in droplet_ip db_host db_port db_username db_password ; do
            val=$(terraform output -raw "$var")
            echo "::add-mask::$val"
            echo "$var=$val" >> "$GITHUB_OUTPUT"
          done

    outputs:
      droplet_ip:  ${{ steps.tfout.outputs.droplet_ip }}
      db_host:     ${{ steps.tfout.outputs.db_host }}
      db_port:     ${{ steps.tfout.outputs.db_port }}
      db_username: ${{ steps.tfout.outputs.db_username }}
      db_password: ${{ steps.tfout.outputs.db_password }}

###############################################################################
# ────────── Job 3 – Configure droplet & deploy containers ────────────────────
###############################################################################
  configure:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: infra/ansible/playbook.yml
          inventory: |
            [all]
            ${{ needs.provision.outputs.droplet_ip }}
          options: |
            --private-key ${{ secrets.DROPLET_SSH_KEY }}
            --user root
        env:
          PHP_IMAGE:              ghcr.io/${{ env.IMAGE_NAME }}:latest
          ADMIN_DEFAULT_USER:     ${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_PASSWORD: ${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          ADMIN_DEFAULT_EMAIL:    ${{ secrets.ADMIN_DEFAULT_EMAIL }}
          DB_HOST:                ${{ needs.provision.outputs.db_host }}
          DB_PORT:                ${{ needs.provision.outputs.db_port }}
          DB_USERNAME:            ${{ needs.provision.outputs.db_username }}
          DB_PASSWORD:            ${{ needs.provision.outputs.db_password }}
