# ─────────────────────────────────────────────────────────────────────────────
#  Axialy Admin – CI/CD pipeline (manual trigger)
# ─────────────────────────────────────────────────────────────────────────────
name: Deploy Axialy Admin
on: {workflow_dispatch:}

permissions:
  contents:  read
  packages:  write

env:
  REGISTRY:   ghcr.io
  IMAGE_NAME: axiamax/axialy-admin-php

###############################################################################
# ─────────────────────────── Job 1 – Docker build ───────────────────────────
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry:   ${{ env.REGISTRY }}
          username:   ${{ github.repository_owner }}
          password:   ${{ secrets.GH_PAT }}

      - name: Build & push PHP image
        run: |
          set -euo pipefail
          IMAGE="$REGISTRY/${{ env.IMAGE_NAME }}:latest"
          docker build -t "$IMAGE" -f docker/php/Dockerfile .
          docker push "$IMAGE"

###############################################################################
# ───────────────────── Job 2 – Terraform provision ──────────────────────────
###############################################################################
  provision:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    env:
      DIGITALOCEAN_TOKEN:  ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:     ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_pub_key:  ${{ secrets.DROPLET_SSH_KEY }}
      TF_VAR_region:       "nyc3"

    steps:
      - uses: actions/checkout@v4

      - name: Detect existing DB cluster
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install doctl
          sudo apt-get -qq update
          sudo apt-get -qq install -y jq
          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"
          CID=$(doctl databases list --output json \
                | jq -r '.[] | select(.name=="axialy-cluster") | .id // empty')
          echo "cluster_id=$CID" >>"$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: {terraform_wrapper: false}

      - name: Terraform init
        run: terraform init -input=false

      - name: Import existing cluster (if detected)
        if: steps.detect.outputs.cluster_id != ''
        run: |
          set -euo pipefail
          CID='${{ steps.detect.outputs.cluster_id }}'
          terraform import -input=false digitalocean_database_cluster.axialy "$CID" || true

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false

      - name: Capture TF outputs
        id: tfout
        shell: bash
        run: |
          set -euo pipefail
          for var in droplet_ip \
                     admin_db_host admin_db_port admin_db_username admin_db_password \
                     ui_db_host    ui_db_port    ui_db_username    ui_db_password; do
            val=$(terraform output -raw "$var")
            echo "::add-mask::$val"
            echo "$var=$val" >>"$GITHUB_OUTPUT"
          done

    outputs:
      droplet_ip:           ${{ steps.tfout.outputs.droplet_ip }}
      admin_db_host:        ${{ steps.tfout.outputs.admin_db_host }}
      admin_db_port:        ${{ steps.tfout.outputs.admin_db_port }}
      admin_db_username:    ${{ steps.tfout.outputs.admin_db_username }}
      admin_db_password:    ${{ steps.tfout.outputs.admin_db_password }}
      ui_db_host:           ${{ steps.tfout.outputs.ui_db_host }}
      ui_db_port:           ${{ steps.tfout.outputs.ui_db_port }}
      ui_db_username:       ${{ steps.tfout.outputs.ui_db_username }}
      ui_db_password:       ${{ steps.tfout.outputs.ui_db_password }}

###############################################################################
# ──────────────── Job 3 – Ansible configure & deploy ────────────────────────
###############################################################################
  configure:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: infra/ansible/playbook.yml
          inventory: |
            [all]
            ${{ needs.provision.outputs.droplet_ip }}
          options: |
            --private-key ${{ secrets.DROPLET_SSH_KEY }}
            --user root
        env:
          PHP_IMAGE:               ghcr.io/${{ env.IMAGE_NAME }}:latest

          # Admin DB creds
          ADMIN_DB_HOST:           ${{ needs.provision.outputs.admin_db_host }}
          ADMIN_DB_PORT:           ${{ needs.provision.outputs.admin_db_port }}
          ADMIN_DB_USERNAME:       ${{ needs.provision.outputs.admin_db_username }}
          ADMIN_DB_PASSWORD:       ${{ needs.provision.outputs.admin_db_password }}

          # UI DB creds
          UI_DB_HOST:              ${{ needs.provision.outputs.ui_db_host }}
          UI_DB_PORT:              ${{ needs.provision.outputs.ui_db_port }}
          UI_DB_USERNAME:          ${{ needs.provision.outputs.ui_db_username }}
          UI_DB_PASSWORD:          ${{ needs.provision.outputs.ui_db_password }}

          # Default admin bootstrap
          ADMIN_DEFAULT_USER:      ${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_PASSWORD:  ${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          ADMIN_DEFAULT_EMAIL:     ${{ secrets.ADMIN_DEFAULT_EMAIL }}
