name: Deploy Axialy-Admin

on:
  workflow_dispatch:          # run manually from the UI
  push:                       # still possible to re-enable later
#    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: axiamax/axialy-admin-php

# ──────────────────────────────────────────────────────────────
#  JOB 1 – Build and publish the PHP image to GHCR
# ──────────────────────────────────────────────────────────────
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:latest -f docker/php/Dockerfile .
          docker push $REGISTRY/$IMAGE_NAME:latest

# ──────────────────────────────────────────────────────────────
#  JOB 2 – Provision infrastructure & configure the droplet
# ──────────────────────────────────────────────────────────────
  provision:
    needs: build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: infra/terraform

    env:
      DIGITALOCEAN_TOKEN:         ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_do_token:            ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_pub_key:         ${{ secrets.DROPLET_SSH_KEY }}
      TF_VAR_namesilo_api_key:    ${{ secrets.NAMESILO_API_KEY }}
      TF_VAR_domain_name:         ${{ secrets.NAMESILO_DOMAIN }}

    steps:
      - uses: actions/checkout@v4

      # ────────────────────────────────────────────────────────
      # 1. Detect an existing DB cluster called “axialy-cluster”
      #    (nothing to import ➜ var will be empty)
      # ────────────────────────────────────────────────────────
      - name: Detect existing DigitalOcean DB cluster
        id: detect
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y doctl jq
          doctl auth init --access-token "$DIGITALOCEAN_TOKEN"

          CLUSTER_ID=$(doctl databases list --output json | \
            jq -r '.[] | select(.name=="axialy-cluster") | .id // empty')

          echo "found_id=$CLUSTER_ID" >> "$GITHUB_OUTPUT"

      # ────────────────────────────────────────────────────────
      # 2. Terraform – import if found, otherwise create
      # ────────────────────────────────────────────────────────
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init
        run: terraform init -input=false

      - name: Import existing resources (if any)
        if: steps.detect.outputs.found_id != ''
        shell: bash
        run: |
          CID='${{ steps.detect.outputs.found_id }}'
          terraform import -input=false \
            'digitalocean_database_cluster.axialy' "$CID" || true

          # import the two DBs if they already exist
          terraform import -input=false \
            'digitalocean_database_db.ui'    "${CID}:axialy_ui"    || true
          terraform import -input=false \
            'digitalocean_database_db.admin' "${CID}:axialy_admin" || true

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false

      # ────────────────────────────────────────────────────────
      # 3. Expose outputs for the Ansible step
      # ────────────────────────────────────────────────────────
      - name: Capture output values
        id: tfout
        run: |
          echo "ip=$(terraform output -raw droplet_ip)"     >> "$GITHUB_OUTPUT"
          echo "db_host=$(terraform output -raw db_host)"   >> "$GITHUB_OUTPUT"
          echo "db_port=$(terraform output -raw db_port)"   >> "$GITHUB_OUTPUT"

      # ────────────────────────────────────────────────────────
      # 4. Configure the droplet (Docker stack, SSL, env-file …)
      # ────────────────────────────────────────────────────────
      - name: Ansible provision
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: infra/ansible/playbook.yml
          inventory: |
            [all]
            ${{ steps.tfout.outputs.ip }}
          options: |
            --private-key ${{ secrets.DROPLET_SSH_KEY }}
            --user root
          env:
            ADMIN_DEFAULT_USER:      ${{ secrets.ADMIN_DEFAULT_USER }}
            ADMIN_DEFAULT_PASSWORD:  ${{ secrets.ADMIN_DEFAULT_PASSWORD }}
            ADMIN_DEFAULT_EMAIL:     ${{ secrets.ADMIN_DEFAULT_EMAIL }}
            NAMESILO_DOMAIN:         ${{ secrets.NAMESILO_DOMAIN }}
            db_host:                 ${{ steps.tfout.outputs.db_host }}
            db_port:                 ${{ steps.tfout.outputs.db_port }}
